BasculAnts PA project.

Membrii:
Bărbulescu Mihai - 325 CA
Petre Andrei - 325CA
Stana Iulian - 325CA
Traistă-Popescu Vlad - 325CA

Mediu de dezvoltare: vim și/sau Eclipse cu PyDev/Egit
Mod de compilare: Interpretor Python
Versionare: repository privat pe github

Rulare bot: python MyBot.py sau ./MyBot.py
(dacă se rulează cu a doua variantă trebuie 
să dați chmod a+x la MyBot.py)
În fișierul script_run.sh am adunat laolată 
toate comenzile care rulează cele 4 hărți
pentru prima etapă, pentru testarea botului.

Abordarea algoritmică a etapei:

-- TODO --

Structura proiectului:
(extrasa din [a1], am folosit Doxygen)

class RandomBot:

  Public attributes:
      paths
      logger

  Public member functions:
    def __init__(self)
    Aici se face inițializarea jurnalizării.
    Utila pentru debug sau informatii despre desfasurarea jocului

    def heuristic_cost_estimate(self, (row1, col1), (row2, col2), ants):
    Obtine estimarea costului euristic pentru explorarea A*

    Parameters:
        start   - punctul din care pleaca furnica. 
        goal 	- puncul la care se doreste sa ajunga furnica. 
    Returns:
        Distanta euclidiana dintre cele doua puncte

    
    def neighbor_nodes(self, current, ants):
    Returneaza toti vecinii nodului curent.

    Parameters:
    current   - coordonatele nodului curent
    Returns:
    Lista continand toti vecinii nodului

    def reconstruct_path(self, came_from, current_node):

    def Astar(self, start, goal, ants):
    Funcția care aplică explorarea A*

    In cadrul acestei functii trebuie ca fiecare furnica sa aiba o anumita
  	tinta: sa mearga dupa mancare, sa omoare o furnica adversa etc.
		Fiecare furnica are un punct de start

    Parameters:
      start - coordonatele punctului de start
      goal - coordonatele punctului la care dorim sa ajunga furnica
      ants - un list comprehension returnat din ants.py (furnicile noastre)

class Ants():

Public Member Functions

def 	__init__
def 	setup
def 	clean
def 	update
def 	issue_order
def 	finish_turn
def 	my_ants
def 	enemy_ants
def 	my_hills
def 	enemy_hills
def 	food
def 	passable
def 	unoccupied
def 	destination
def 	distance
def 	direction
def 	closest_food
def 	closest_enemy_ant
def 	closest_enemy_hill
def 	closest_unseen
def 	render_text_map
def 	run

Funcții noi, definite de noi:

def 	mapfilter
def 	landmap

Public Attributes
 	width
 	height
 	map
 	ant_list
 	food_list
 	dead_list
 	hill_list
 	map_filter
 	land_map
 	turntime
 	loadtime
 	viewradius2
 	attackradius2
 	spawnradius2


Contribuțiile membrilor echipei:

Bărbulescu Mihai - a realizat documentația proiectului, 
a adăugat posibilitatea de logging cu ajutorul căruia
s-au putut testa codul și depana erorile. 

Petre Andrei - a implementat explorarea A* și a pus bazele
modului în care furnicile se deplasează pe hartă
(TODO - de adăugat ce tutoriale de pe net a folosit la 
surse de inspirație)

Stana Iulian - a implementat funcțiile mapfilter și landmap
și implicit a adus îmbunătățiri la modul de explorare a 
furnicilor (bazate pe functia visible din [c1])

Vlad Traistă-Popescu - a realizat unit-testing și a făcut
debugging pe fiecare commit al membrilor atunci când 
programul nu rula cum trebuie.

Surse de inspirație:

[s1] Cristian A. Giumale – Introducere în Analiza Algoritmilor, 
Polirom, 2004 (capitolul 7)
[s2] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest 
și Clifford Stein – Introduction to Algorithms, 
Third Edition, MIT Press, 2009 
[s3] http://swarm.cs.pub.ro/~adrian.sc/documentatie.pdf 

Surse de cod:

[c1] https://github.com/wraithan/aichallenge-ants/blob/master/ants.py

Alte linkuri:

[a1] http://swarm.cs.pub.ro/~mbarbulescu/.secret/html/


-TODO - Extras din http://elf.cs.pub.ro/pa/wiki/regulament-proiect
Dupa ce apare BIFAT la toate stergem aceste linii!!!
README: mediu de dezvoltare folosit - BIFAT
mod de compilare - BIFAT
fiecare membru al echipei ce a facut - sort of
structura proiectului (clase) - BIFAT (dar Stana refuză să-și descrie funcțiile)
surse de inspiratie - sort of
surse de cod (pentru structuri de date de exemplu) - sort of
bordarea algoritmica a etapei (ce algoritmi ati folosit, cum i-ati combinat, de ce, complexitati, etc.) - TODO
